name: CI para Backend

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t geminis-backend:latest -f RoadRunner.Dockerfile .

      - name: Create Docker network
        run: docker network create github_network

      - name: Start MySQL container
        run: docker run -d --name mysql --network github_network -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=geminis -e MYSQL_USER=userGeminis -e MYSQL_PASSWORD=secret mysql:8

      - name: Wait for MySQL to be ready
        run: |
          until docker run --rm --network github_network mysql:8 mysqladmin ping -h mysql --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          echo "MySQL is ready!"

      - name: Start backend container
        run: docker run -d --name geminis-backend --network github_network geminis-backend:latest

      - name: Configure environment and run tests
        run: |
          docker cp backend/.env.example geminis-backend:/var/www/.env
          docker exec geminis-backend sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' /var/www/.env
          docker exec geminis-backend php artisan key:generate
          docker exec geminis-backend php artisan migrate --force
          docker exec geminis-backend vendor/bin/phpunit --log-junit /var/www/test-results-unit.xml
          docker exec geminis-backend php vendor/bin/phpunit --testsuite integration --log-junit /var/www/test-results-integration.xml

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl
          tools: composer

      - name: Install PHP_CodeSniffer and PHPCBF
        run: |
          composer global require "squizlabs/php_codesniffer=*"
          echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Run PHPCBF to fix coding standard issues
        run: phpcbf --standard=PSR12 backend/

      - name: Run PHP_CodeSniffer and save results
        id: phpcs
        run: |
          phpcs --standard=PSR12 backend/ | tee phpcs-result.txt
        continue-on-error: true

      - name: Check if PHP_CodeSniffer results file exists
        id: check_file
        run: |
          if [ -f phpcs-result.txt ]; then echo "file-exists=true" >> $GITHUB_ENV; else echo "file-exists=false" >> $GITHUB_ENV; fi

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Post PHP_CodeSniffer results to PR or Commit
        if: env.file-exists == 'true'
        run: |
          phpcsResults=$(cat phpcs-result.txt)
          body="## PHP_CodeSniffer results:\n\`\`\`\n$phpcsResults\n\`\`\`"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$body"
          else
            gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments --field body="$body"
          fi

      - name: Send alert to Teams if PHP_CodeSniffer fails
        if: failure()
        run: |
          curl -H 'Content-Type: application/json' \
            -d '{"text": "PHP_CodeSniffer analysis failed for commit '${{ github.sha }}'. Please check the details in the pipeline logs."}' \
            ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: /var/www/*.xml

      - name: Post test results to PR or Commit
        if: always()
        run: |
          unitTestResults=""
          integrationTestResults=""
          if [ -f /var/www/test-results-unit.xml ]; then
            unitTestResults=$(cat /var/www/test-results-unit.xml)
          fi
          if [ -f /var/www/test-results-integration.xml ]; then
            integrationTestResults=$(cat /var/www/test-results-integration.xml)
          fi
          body="## Unit Test Results:\n$unitTestResults\n\n## Integration Test Results:\n$integrationTestResults"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$body"
          else
            gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments --field body="$body"
          fi

      - name: Clean up Docker containers and network
        if: always()
        run: |
          docker rm -f geminis-backend || true
          docker rm -f mysql || true
          docker network rm github_network || true
