name: "Backend Continuous Integration"

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

jobs:
  build:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_mysql, zip, exif, pcntl, opcache

      - name: Install dependencies
        working-directory: ./backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy environment file
        run: cp ${{ github.workspace }}/backend/.env.example ${{ github.workspace }}/backend/.env

      - name: Generate application key
        working-directory: ${{ github.workspace }}/backend
        run: php artisan key:generate

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/backend
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Copy Dockerfile and deployment files to backend
        run: |
          cp ${{ github.workspace }}/RoadRunner.Dockerfile ${{ github.workspace }}/backend/RoadRunner.Dockerfile
          cp -r ${{ github.workspace }}/deployment ${{ github.workspace }}/backend/deployment

      - name: Build Docker image
        working-directory: ${{ github.workspace }}/backend
        run: docker build -t geminis-backend -f ${{ github.workspace }}/backend/RoadRunner.Dockerfile .

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ${{ github.workspace }}/backend/coverage.xml

      - name: Create a comment with the test results
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('${{ github.workspace }}/backend/coverage.xml', 'utf8');
            github.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `### Test Coverage Report\n\`\`\`\n${report}\n\`\`\``
            });
