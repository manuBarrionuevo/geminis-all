name: CI for Backend

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t geminis-backend:latest -f RoadRunner.Dockerfile .

      - name: Wait for MySQL
        run: |
          until docker run --network="host" --rm mysql:5.7 mysqladmin ping -h127.0.0.1 --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 3
          done

      - name: Run database migrations and seeders
        run: |
          docker run --network="host" -e DB_CONNECTION=mysql -e DB_HOST=127.0.0.1 -e DB_PORT=3306 -e DB_DATABASE=test -e DB_USERNAME=user -e DB_PASSWORD=password geminis-backend:latest php artisan migrate --seed

      - name: Run unit tests
        run: |
          docker run --network="host" -e DB_CONNECTION=mysql -e DB_HOST=127.0.0.1 -e DB_PORT=3306 -e DB_DATABASE=test -e DB_USERNAME=user -e DB_PASSWORD=password geminis-backend:latest ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --testdox

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./tests/_output

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage.xml

      - name: Create a comment with the test results
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.xml', 'utf8');
            github.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `### Test Coverage Report\n\`\`\`\n${coverage}\n\`\`\``
            });
