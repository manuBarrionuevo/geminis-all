name: CI para Backend

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t geminis-backend:latest -f RoadRunner.Dockerfile .

      - name: Create Docker network
        run: docker network create github_network

      - name: Start MySQL container
        run: docker run -d --name mysql --network github_network -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=geminis -e MYSQL_USER=userGeminis -e MYSQL_PASSWORD=secret mysql:8

      - name: Wait for MySQL to be ready
        run: |
          until docker run --rm --network github_network mysql:8 mysqladmin ping -h mysql --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          echo "MySQL is ready!"

      - name: Start backend container
        run: docker run -d --name geminis-backend --network github_network geminis-backend:latest

      - name: Configure environment and run tests
        run: |
          docker cp backend/.env.example geminis-backend:/var/www/.env
          docker exec geminis-backend sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' /var/www/.env
          docker exec geminis-backend php artisan key:generate
          docker exec geminis-backend php artisan migrate --force
          docker exec geminis-backend vendor/bin/phpunit --log-junit /var/www/test-results-unit.xml
          docker exec geminis-backend php vendor/bin/phpunit --testsuite integration --log-junit /var/www/test-results-integration.xml

      - name: Copy test results to host
        run: |
          docker cp geminis-backend:/var/www/test-results-unit.xml test-results-unit.xml
          docker cp geminis-backend:/var/www/test-results-integration.xml test-results-integration.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: ./*.xml

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install SonarQube Scanner
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          echo 'sonar-scanner-4.6.2.2472-linux/bin' >> $GITHUB_PATH

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.organization=your_organization_key \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io

      - name: Post test results 
